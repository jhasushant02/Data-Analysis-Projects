SQL Committed Queries
---
<Queries Started>

# Retrieve the total number of orders placed.

SELECT 
    COUNT(order_id) AS total_orders
FROM
    orders;    

-- Calculate the total revenue generated from pizza sales.


SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),
            2) AS total_revenue
FROM
    order_details
        JOIN
    pizzas ON pizzas.pizza_id = order_details.pizza_id
ORDER BY total_revenue DESC;


-- Identify the highest-priced pizza.

SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;

-- Identify the most common pizza size ordered.

SELECT 
    pz.size AS pizza_size, 
    COUNT(pz.size) AS ordered_by_people, 
    sum(od.quantity) as Total_Ordered
FROM
    order_details AS od
        JOIN
    pizzas AS pz 
    ON od.pizza_id = pz.pizza_id
GROUP BY pizza_size
ORDER BY Total_Ordered DESC
limit 1;

-- List the top 5 most ordered pizza types along with their quantities.

SELECT 
    pzt.name AS pizza_name, SUM(od.quantity) AS pizza_quantity
FROM
    pizza_types AS pzt
        JOIN
    pizzas AS pz ON pzt.pizza_type_id = pz.pizza_type_id
        JOIN
    order_details AS od ON od.pizza_id = pz.pizza_id
GROUP BY pizza_name
ORDER BY pizza_quantity DESC
LIMIT 5;

-- Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT 
    distinct pzt.category, SUM(od.quantity) AS total_ordered
FROM
    pizza_types AS pzt
        JOIN
    pizzas AS pz ON pzt.pizza_type_id = pz.pizza_type_id
        JOIN
    order_details AS od ON od.pizza_id = pz.pizza_id
GROUP BY pzt.category 
ORDER BY total_ordered DESC;

-- Determine the distribution of orders by hour of the day.

SELECT 
    HOUR(order_time) AS Order_Hour, 
    COUNT(order_id) AS Order_id
FROM
    orders
GROUP BY HOUR(order_time);

-- Join relevant tables to find the category-wise distribution of pizzas.

SELECT 
    category, COUNT(name)
FROM
    pizza_types
GROUP BY category;

-- Group the orders by date and calculate the average number of pizzas ordered per day.

with cte as (
select o.order_date as O_Date, sum(od.quantity) as qty
from orders o 
join order_details od 
on o.order_id = od.order_id
group by O_Date)

select round(avg(qty),0) as avg_pizza_ordered_per_day from cte;

-- Determine the top 3 most ordered pizza types based on revenue.

SELECT 
    pzt.name AS 'P_name',
    ROUND(SUM(pz.price * od.quantity), 2) AS 'Revenue'
FROM
    pizza_types AS pzt
        JOIN
    pizzas AS pz ON pz.pizza_type_id = pzt.pizza_type_id
        JOIN
    order_details AS od ON od.pizza_id = pz.pizza_id
GROUP BY P_name
ORDER BY Revenue DESC
LIMIT 3;

-- Calculate the percentage contribution of each pizza type to total revenue.

WITH 
  revenue AS (
    SELECT 
      pzt.name AS 'P_name', 
      ROUND(SUM(pz.price * od.quantity), 2) AS 'rev' 
    FROM 
      pizza_types AS pzt 
      JOIN pizzas AS pz ON pz.pizza_type_id = pzt.pizza_type_id 
      JOIN order_details AS od ON od.pizza_id = pz.pizza_id 
    GROUP BY 
      P_name
  ),
  total_sales AS (
    SELECT 
      ROUND(SUM(od.quantity * pz.price), 2) AS ts 
    FROM 
      order_details AS od 
      JOIN pizzas AS pz ON pz.pizza_id = od.pizza_id
  )
SELECT 
  P_name, 
  ROUND((rev / (SELECT ts FROM total_sales)) * 100, 2) AS percentage 
FROM 
  revenue;

-- Analyze the revenue generated per day and the percentage contribution to total revenue.

with rvpd as (
select
date(o.order_date) as Ord_date,
round(sum(od.quantity*pz.price),2) as revenue_per_day
from
orders as o
join 
order_details as od 
on o.order_id = od.order_id
join
pizzas as pz
on od.pizza_id = pz.pizza_id
group by Ord_date),

total_sales AS (
    SELECT 
      ROUND(SUM(od.quantity * pz.price), 2) AS ts 
    FROM 
      order_details AS od 
      JOIN pizzas AS pz ON pz.pizza_id = od.pizza_id
  )
  
  SELECT 
  Ord_date, revenue_per_day,
  ROUND((revenue_per_day / (SELECT ts FROM total_sales)) * 100, 2) AS percentage 
FROM 
  rvpd;  

-- Analyze the cumulative revenue generated over time.

with sales as (
select
o.order_date as Ord_date,
round(sum(od.quantity*pz.price),2) as revenue_per_day
from
orders as o
join 
order_details as od 
on o.order_id = od.order_id
join
pizzas as pz
on od.pizza_id = pz.pizza_id
group by Ord_date)

select Ord_date, 
sum(revenue_per_day) over(order by Ord_date) as cum_revenue from sales;

-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.

with ranking as (
with cte as (
select  pzt.category as 'cat', pzt.name 'pname', 
round(sum(od.quantity * pz.price),2) as revenue
from 
pizza_types as pzt
join
pizzas as pz
on pzt.pizza_type_id = pz.pizza_type_id
join order_details as od
on od.pizza_id = pz.pizza_id
group by cat,pname)

select cat,pname,revenue, 
rank() over(partition by cat order by revenue desc) as rnk 
from cte)

select * from ranking
where rnk<=3;

-- Calculate the average order per value.

with cte as(
select
ROUND(SUM(od.quantity * pz.price),2) as 'total_price',
count(distinct od.order_id) as 'total_orders'
from  order_details od
join 
pizzas pz
on od.pizza_id = pz.pizza_id)
select (total_price/total_orders) as Avg_Order_Value from cte;

-- Calculate the total pizza sold.

SELECT 
    SUM(quantity) AS Total_Pizza_Sold
FROM
    order_details;

-- Calculate the average pizzas per order

SELECT 
    CAST(
			CAST(SUM(quantity) AS DECIMAL (10 , 2 ))
            /
            CAST(COUNT(DISTINCT order_id) AS DECIMAL (10 , 2 ))
		AS DECIMAL (10 , 2 )		        
        ) AS Avg_Pizzas_Per_Order
FROM
    order_details;  


-- Determine the daily trend of orders

SELECT 
    DAYNAME(o.order_date) AS Order_Day,
    COUNT(DISTINCT od.order_id) AS Total_Orders
FROM
    orders o
        JOIN
    order_details od ON o.order_id = od.order_id
GROUP BY DAYNAME(o.order_date)
ORDER BY DAYNAME(o.order_date);

-- Determine the hourly trend of orders

SELECT 
    HOUR(o.order_time) AS hours,
    COUNT(DISTINCT o.order_id) AS total_orders,
    SUM(od.quantity) AS total_quantity
FROM
    orders o
        JOIN
    order_details od ON o.order_id = od.order_id
GROUP BY HOUR(o.order_time)
ORDER BY hours ASC;

-- Join the necessary tables to find the total quantity of each pizza category ordered.

with cte as (
SELECT 
    pzt.category as 'pizza_category', 
    ROUND(SUM(od.quantity * pz.price),2) as 'total_price'
FROM
    pizza_types AS pzt
        JOIN
    pizzas AS pz ON pzt.pizza_type_id = pz.pizza_type_id
        JOIN
    order_details AS od ON od.pizza_id = pz.pizza_id
GROUP BY pzt.category )


SELECT pizza_category, CAST(SUM(total_price) AS DECIMAL(10,2)) AS Total_Revenue,
CAST(SUM(total_price) * 100 / (SELECT SUM(total_price) 
from cte ) AS DECIMAL(10,2)) AS PCT
FROM cte
GROUP BY pizza_category;

-- Calculate the percentage sales by pizza size


WITH cte AS (
  SELECT 
    pz.size AS pizza_size, 
    ROUND(SUM(od.quantity * pz.price), 2) AS total_price
  FROM
    pizza_types AS pzt
  JOIN
    pizzas AS pz ON pzt.pizza_type_id = pz.pizza_type_id
  JOIN
    order_details AS od ON od.pizza_id = pz.pizza_id
  GROUP BY pz.size
)
SELECT pizza_size, 
       CAST(SUM(total_price) AS DECIMAL(10,2)) AS Total_Revenue,
       CAST(SUM(total_price) * 100 / (SELECT SUM(total_price) FROM cte) AS DECIMAL(10,2)) AS PCT
FROM cte
GROUP BY pizza_size
ORDER BY pizza_size;

-- Calculate the total pizza sold by each pizza category.

SELECT 
    pzt.category AS 'pizza_category',
    SUM(od.quantity) AS Total_Quantity_Sold
FROM
    pizza_types pzt
        JOIN
    pizzas pz ON pzt.pizza_type_id = pz.pizza_type_id
        JOIN
    order_details od ON pz.pizza_id = od.pizza_id
        JOIN
    orders o ON od.order_id = o.order_id
WHERE
    MONTH(o.order_date) = 2
GROUP BY pizza_category
ORDER BY Total_Quantity_Sold DESC;



<End of the Queries>